@inject IRepositorio repositorio

<EditForm Model="Pelicula" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Titulo:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Titulo" />
            <ValidationMessage For="@(()=>Pelicula.Titulo)" class="invalid-feedback" />
        </div>
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox class="form-check-input" @bind-Value="@Pelicula.EnCartelera" />
        <label class="form-check-label">En cartelera:</label>
        <ValidationMessage For="@(()=>Pelicula.EnCartelera)" class="invalid-feedback" />
    </div>

    <div class="mb-3">
        <label class="form-label">Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Trailer" />
            <ValidationMessage For="@(()=>Pelicula.Trailer)" class="invalid-feedback" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Lanzamiento:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Pelicula.Lanzamiento" />
            <ValidationMessage For="@(()=>Pelicula.Lanzamiento)" class="invalid-feedback" />
        </div>
    </div>

    <div class="mb-3">
        <InputImg Label="Poster" ImagenSeleccionada="ImagenSeleccionada" ImagenURL="@imagenURL" />
    </div>

    <div class="mb-3 form-markdown">
        <InputMarkdown @bind-Value="Pelicula.Resumen"
                       For=@(() =>Pelicula.Resumen)
                       Label="Resumen" />
    </div>

    <div class="mb-3">
        <label class="form-label">Generos:</label>
        <div>
            <SelectorMultiple NoSeleccionados="NoSeleccionados" Seleccionados="Seleccionados">

            </SelectorMultiple>
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Actores:</label>
        <div>
            <SelectorMultipleTypeahead Context="Actor" SearchMethod="BuscarActores"
                                       ElementoSeleccionados="ActoresSeleccionados">
                <MyListTemplate>
                    @Actor.Nombre / <input type="text" placeholder="Personaje" @bind="Actor.Personaje" class="form-control" />
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width:50px" src="@Actor.Foto" />
                    <span style="color:black">@Actor.Nombre</span>
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>

    <button class="btn btn-primary">Guardar Cambios</button>

</EditForm>



@code 
{
    string? imagenURL;
    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Pelicula.Poster))
        {
            imagenURL = Pelicula.Poster;
            Pelicula.Poster = null;
        }

        Seleccionados = GenerosSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();

        NoSeleccionados = GenerosNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();

    }

    private void ImagenSeleccionada(string imagenBase64)
    {
        Pelicula.Poster = imagenBase64;
        imagenURL = null;
    }
    [Parameter]
    [EditorRequired]
    public Pelicula Pelicula { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<Genero> GenerosSeleccionados { get; set; } = new List<Genero>();

    [Parameter]
    [EditorRequired]
    public List<Genero> GenerosNoSeleccionados { get; set; } = new List<Genero>();

    [Parameter]
    public List<Actor> ActoresSeleccionados { get; set; } = new List<Actor>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();

    private async Task<IEnumerable<Actor>>BuscarActores(string searchText)
    {
        var respuestaHTTP = await repositorio.Get<List<Actor>>($"api/actores/buscar/{searchText}");
        return respuestaHTTP!.Response!;

    }

    private async Task OnDataAnnotationsValidated()
    {
        Pelicula.GenerosPelicula = Seleccionados
        .Select(x => new GeneroPelicula { GeneroId = int.Parse(x.Llave) }).ToList();

        Pelicula.PeliculasActor = ActoresSeleccionados
        .Select(x => new PeliculaActor { ActorId = x.Id, Personaje = x.Personaje }).ToList();

        await OnValidSubmit.InvokeAsync(); 
    }
    

}

